local LatestSupportedVersion = 1862


function scr()
    game:GetService("Players").LocalPlayer.PlayerGui:WaitForChild("ScreenGui")
    local vu = game:GetService("VirtualUser")
    game:GetService("Players").LocalPlayer.Idled:connect(function()
       vu:Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
       wait(1)
       vu:Button2Up(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
    end)
    
    local library =  loadstring(game:HttpGet("https://pastebin.com/raw/EBSNtywp", true))()
            
    local f = debug.getupvalues(require(game:GetService("Players").LocalPlayer.PlayerGui.ScreenGui.ClientScript.Modules.InputService).UpdateClickDelay)[1]
    repeat
        wait(.1)
        f = debug.getupvalues(require(game:GetService("Players").LocalPlayer.PlayerGui.ScreenGui.ClientScript.Modules.InputService).UpdateClickDelay)[1]
    until f ~= nil
    local Module = game:GetService("ReplicatedStorage").Assets.Modules.ImageService
    
    local pets = debug.getupvalues(require(Module))[1]
    
    local farm = library:CreateWindow('Auto Farm')
    
    local petlist = require(game:GetService("ReplicatedStorage").Assets.Modules.ItemDataService.PetModule)
    local hatlist = require(game:GetService("ReplicatedStorage").Assets.Modules.ItemDataService.HatModule)
    local raritys = {}
    local moneyz = require(game:GetService("Players").LocalPlayer.PlayerGui.ScreenGui.ClientScript.Modules.GuiService)
    
    local currencys = {}
    local canafford = false
    for i,d in pairs(moneyz) do
        if string.find(i,"Changed") ~= nil then
            currencys[i:sub(1, #i-7)] = debug.getupvalues(d)[3]
        end
    end
    for i,d in pairs(petlist) do
        if d["Rarity"] ~= "Legendary" then
            raritys[d["Rarity"]] = true
        end
    end
    local eggs = library:CreateWindow('Auto Egg')
    local hats = library:CreateWindow("Hats")
    local misc = library:CreateWindow('Misc')
    misc:Section("Swap")
    local worlds = {}
    local loadworlds = false
    repeat wait(0.1)
        local modul = require(game:GetService("Players").LocalPlayer.PlayerGui.ScreenGui.ClientScript.Modules.WorldService).SetWorld
        for i,d in pairs(debug.getupvalue(modul,3)) do
            loadworlds = true
        end
    until loadworlds
    local tpyes = require(game:GetService("Players").LocalPlayer.PlayerGui.ScreenGui.ClientScript.Modules.WorldService)
    for i,d in pairs(debug.getupvalue(tpyes.SetWorld,3)) do
        table.insert(worlds,i)
    end
    misc:Dropdown("World", {
        location = _G,
        flag = "world",
        list = worlds
     })
 
    misc:Button('Swap World', function()
        if _G.world ~= nil then
            tpyes.SetWorld(tpyes,_G.world)
        end
     end)
    misc:Section("Unlock")
    misc:Button('Unlock Islands', function()
        for i , v in pairs(game:GetService("Workspace").FloatingIslands:GetChildren()) do
            if #v:GetChildren() > 0 then
                for i ,v in pairs(v:GetChildren()) do
                    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.Collision.CFrame
                    wait(1)
                end
            end
        end
     end)
    misc:Section("Collect")
    misc:Button("Collect chests", function()
        for i,v in pairs(game:GetService("Workspace").FloatingIslands:GetDescendants()) do 
            if v.Name == "Chest" and v.ClassName == "Model" then 
                f["FireServer"](f, "TeleportToCheckpoint", v.Parent.Name)
                wait(0.25)
                repeat
                    f["FireServer"](f, "CollectChestReward", v.Parent.Name)
                    wait()
                until v.Regen.Enabled == true
                wait(0.25)
            end
        end
    end)
    misc:Section("Misc")
    local cccc = require(game:GetService("ReplicatedStorage").Assets.Modules.EggService)
    repeat
        wait()
        cccc = require(game:GetService("ReplicatedStorage").Assets.Modules.EggService)
    until cccc ~= nil
    local hat1 = cccc.HatchEgg
    local hat3 = cccc.MultiHatchEgg
    misc:Toggle('Skip Animation', {flag = "soa"},function(gh)
        cccc.HatchEgg = (gh == true and function()end or hat1)
        cccc.MultiHatchEgg = (gh == true and function()end or hat3)
    end)
    
    local eggtps = {}
    local eggsnames = {}
    local egginfo = require(game:GetService("ReplicatedStorage").Assets.Modules.ItemDataService.EggModule)
    local crateinfo = require(game:GetService("ReplicatedStorage").Assets.Modules.ItemDataService.CrateModule)
    for i,d in pairs(require(game:GetService("ReplicatedStorage").Assets.Modules.ItemDataService.EggModule)) do
        if game.Workspace.Eggs:FindFirstChild(i) then
            eggtps[i] = game.Workspace.Eggs[i].Hotkey
        end
        table.insert(eggsnames, i)
    end
    for i,d in pairs(require(game:GetService("ReplicatedStorage").Assets.Modules.ItemDataService.CrateModule)) do
        if game.Workspace.Eggs:FindFirstChild(i) then
            eggtps[i] = game.Workspace.Eggs[i].Hotkey
        end
        table.insert(eggsnames, i)
    end
    local function ownsgamepass(userid,gamepassid)
        local mar = game:GetService"MarketplaceService"
        local s,res = pcall(mar.UserOwnsGamePassAsync,mar,userid,gamepassid)
        if not s then
            res = false
        end
        return res
    end
    
    local triple = ownsgamepass(game.Players.LocalPlayer.UserId, 5502695)
    eggs:Section("Open Eggs / Crates")
    eggs:SearchBox("Egg", {
        location = eggs.flags,
        flag = "egg",
        list = eggsnames
     }, function()end)
    
    eggs:Toggle('Buy Eggs', {flag = "eggs"})
    if triple then
        eggs:Toggle('Buy Eggs (3x)', {flag = "three"})
    end
    eggs:Section("Delete Pets")
    for i,d in pairs(raritys) do
        eggs:Toggle('Delete '..i, {flag = tostring(i)})
    end
    hats:Section("Delete Hats")
    for i,d in pairs(raritys) do
        hats:Toggle('Delete '..i, {flag = tostring(i)})
    end
    hats:Toggle('Delete Easy Legendary',{flag = 'easyleg'})
    eggs:Toggle('Delete Easy Legendary',{flag = 'easyleg'})
    eggs:Section("Upgrade Pets")
    
    eggs:Toggle('Make Pets Shiny', {flag = "shiny"})
    
    eggs:Toggle('Enchant Pets', {flag = "upgrade"})

    local sell = false
    
    function toTarget(pos, targetPos, targetCFrame)
        local tween_s = game:service"TweenService"
        local info = TweenInfo.new((targetPos - pos).Magnitude/80, Enum.EasingStyle.Quad)
        local tic_k = tick()
        local tween, err = pcall(function()
            local tween = tween_s:Create(plr.Character["HumanoidRootPart"], info, {CFrame = targetCFrame})
            tween:Play()
        end)
        if not tween then return err end
    end
    spawn(function()
        while wait() do
            if eggs.flags.eggs == true or eggs.flags.three == true then
                if eggs.flags.egg ~= nil then
                    if (egginfo[eggs.flags.egg] or crateinfo[eggs.flags.egg]) then
                    local cost = (egginfo[eggs.flags.egg] or crateinfo[eggs.flags.egg]).Cost
                    local e = 0
                    e = cost[2]
    				if eggs.flags.three then 
    					e = e * 3
    				end
                    if currencys[cost[1]] and sell ~= true then
                    if currencys[cost[1]].Value >= e then
                        canafford = true
                    if eggtps[eggs.flags.egg] then
                        if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                            if (eggtps[eggs.flags.egg].Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude > 10 then
                                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.X,eggtps[eggs.flags.egg].Position.Y,game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.Z)
                                toTarget(game.Players.LocalPlayer.Character.HumanoidRootPart.Position,eggtps[eggs.flags.egg].Position,eggtps[eggs.flags.egg].CFrame)
                            else
                                if eggs.flags.three == true then
                                    f["FireServer"](f, "PurchaseEgg",eggs.flags.egg, 'Multi')
                                else
                                    f["FireServer"](f, "PurchaseEgg",eggs.flags.egg)
                                end
                            end
                        end
                    end
                    else
                        canafford = false
                    end
                    else
                        canafford = false
                    end
                else
                    canafford = false
                end
                else
                    canafford = false
                end
            else
                canafford = false
            end
        end
    end)
    farm:Section("Farm")
    farm:Toggle('Auto-Bubble Blow', {flag = 'Bubble'})
    
    
    farm:Toggle('Auto-Sell', {flag = 'Sell'})
    
    farm:Box('Radius', {
        flag = "Rad",
        type = 'number'
    })
    
    farm:Toggle("Farm Drops", {flag = 'Drops'})
    farm:Section("Minigames")
    farm:Toggle('Auto-Guess Pet', {flag = 'Guess'})
    
    farm:Toggle('Friendly mode', {flag = 'Friendly'})
    
    farm:Toggle('Spin To Win', {flag = 'spt'})

    farm:Toggle('Win Doggo', {flag = 'dog'})
    
    farm:Credits()
    
    spawn(function()
        while wait(.1) do
            if farm.flags.spt then
                f['FireServer'](f,'SpinToWin')
            end
        end
    end)

    spawn(function()
        while wait(.1) do
            if farm.flags.dog then
                f:FireServer("DoggyJumpWin", 4)
            end
        end
    end)
    farm:Section("Thanks for using Zeus!")
    spawn(function()
        while wait(.1) do
            if farm.flags.Bubble then
                if f then
                    f['FireServer'](f,'BlowBubble')
                else
                    f = debug.getupvalues(require(game:GetService("Players").LocalPlayer.PlayerGui.ScreenGui.ClientScript.Modules.InputService).UpdateClickDelay)[1]
                end
            end
        end
    end)
    
    spawn(function()
        while wait(.1) do
            if farm.flags.Sell then
           		local a = string.split(game:GetService("Players").LocalPlayer.PlayerGui.ScreenGui:WaitForChild("StatsFrame").Bubble.Amount.Text,'/')
                if a[1] == a[2] then
                    sell = true
    				f['FireServer'](f,"Teleport","Sell")
    				wait(.1)
                    f['FireServer'](f,'Sell')
                else
                    sell = false
    			end
            end
        end
    end)
    
    
    game:GetService("Workspace").GuessThatPet.GuessThatPetBoard.SurfaceGui.Frame.Main.Pet.Changed:Connect(function ()
        if farm.flags.Guess then
            for i,d in pairs(pets) do
                if d == game:GetService("Workspace").GuessThatPet.GuessThatPetBoard.SurfaceGui.Frame.Main.Pet.Image then
                    if farm.flags.Friendly then
                        game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(i, "All")
                    end
                    game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(i, "All")
                end
            end
        end
    end)
    
    
    
    
    local range = 100
    
    local plr = game.Players.LocalPlayer
    local char = plr.Character
    local root = char.HumanoidRootPart
    
    function toTarget(pos, targetPos, targetCFrame)
          local tween, err = pcall(function()local tween = game:service"TweenService":Create(plr.Character["HumanoidRootPart"], TweenInfo.new((targetPos - pos).Magnitude/50, Enum.EasingStyle.Quad), {CFrame = targetCFrame})tween:Play()end)
          if not tween then return err end
    end
    
    --game:GetService('RunService').Stepped:connect(function()
    --    if farm.flags.Drops then
    --        game.Players.LocalPlayer.Character.Humanoid:ChangeState(11)
    --    end
    --end)
    local target = nil
    spawn(function ()
    while wait() do 
    	if farm.flags.Drops or target and not sell then
    		game.Players.LocalPlayer.Character.Humanoid:ChangeState(11)
    	end
    end
    end)
    
    spawn(function()
    while wait(.2) do
        if farm.flags.Drops then
            local closest = nil
            local dis = math.huge
        for i , v in pairs(game.Workspace.Pickups:GetChildren()) do
            range = farm.flags.Rad
            if tonumber(range) ~= nil then
                if v:FindFirstChild('TouchInterest') and (root.Position-v.Position).magnitude <= tonumber(range) and (root.Position-v.Position).magnitude < dis and farm.flags.Drops and canafford ~= true and sell ~= true then
                    --root.CFrame = CFrame.new(root.CFrame.X,v.CFrame.Y,root.CFrame.Z)
                    closest = v
                    dis = (root.Position-v.Position).magnitude
                end
            end
        end
        if closest ~= nil and (target == nil or target.Parent == nil) then
            local dis = closest.CFrame.Y - root.CFrame.Y
            if dis < (closest.Size.Y * -1) or dis > closest.Size.Y then
                root.CFrame = CFrame.new(root.CFrame.X,closest.CFrame.Y + 2,root.CFrame.Z)
            end
            toTarget(root.Position,closest.Position + Vector3.new(0,2,0),closest.CFrame + Vector3.new(0,2,0))
        end
        end
    end
    end)
    
    local Module = game:GetService("Players").LocalPlayer.PlayerGui.ScreenGui.ClientScript.Modules.GuiService-- your module here
    local gg = require(Module)
    
    
    
    
    local function GetRarity(name)
        local entry = petlist[name]
        if entry ~= nil then
            return petlist[name]['Rarity']
        else
            return "error"
        end
    end
    
    local function HGetRarity(name)
        local entry = hatlist[name]
        if entry ~= nil then
            return hatlist[name]['Rarity']
        else
            return "error"
        end
    end
    
    local function Delete(Id)
        f['FireServer'](f,'DeletePet',Id)
    end
    local function HDelete(Id)
        f['FireServer'](f,'DeleteHat',Id)
    end
    repeat wait() until typeof(gg.TryShowPetsFrame) == "function"
    local get = debug.getupvalues(require(Module).TryShowPetsFrame)[4]["PetsFrame"]
    spawn(function()
        while wait(30) do
            if eggs.flags.upgrade then
            	for i = 0 , 50 , 1 do 
               		f["FireServer"](f, "EnchantPet", id)
            	end
            end
        end
    end)
    local Eggs = require(game:GetService("ReplicatedStorage").Assets.Modules.ItemDataService.EggModule)
    local Crates = require(game:GetService("ReplicatedStorage").Assets.Modules.ItemDataService.CrateModule)
    local EasyLeg = {}
    for i , v in pairs(Eggs) do 
    	for i , v in pairs(v.Rarities) do
    		if GetRarity(v[1]) == 'Legendary' and v[2] >= 0.1 then
    			table.insert(EasyLeg,v[1])
    		end
    	end
    end
    local HEasyLeg = {}
    for i , v in pairs(Crates) do 
    	for i , v in pairs(v.Rarities) do
    		if GetRarity(v[1]) == 'Legendary' and v[2] >= 0.1 then
    			table.insert(HEasyLeg,v[1])
    		end
    	end
    end
    local pn = require(game:GetService("ReplicatedStorage").Assets.Modules.Library.index)["PETS"]
    local hn = require(game:GetService("ReplicatedStorage").Assets.Modules.Library.index)["HATS"]
    spawn(function()
        while wait(0.1) do 
            local cp = {}
            local dfg = {}
    		local a = game:GetService("Players").LocalPlayer.PlayerGui.ScreenGui.ClientScript.Modules.GuiService
    		local e = f:InvokeServer("GetPlayerData")
            for i,d in pairs(e[pn]) do
    		    local id = d[1]
                local name = d[2]
                local rarity = GetRarity(name)
                local deleted = false
    		    if eggs.flags[rarity] == true then 
                    Delete(id)
                    deleted = true
    		    elseif eggs.flags.easyleg then
    		    	for i , v in pairs(EasyLeg) do 
    		    		if v == name then
                            Delete(id)
                            deleted = true
    		    		end
    		    	end
                end
                if eggs.flags.shiny and deleted == false then
                    if d[8] == false then
                        cp[name] = (cp[name] or 0) + 1
                        if cp[name] >= 10 then
                            cp[name] = 0
                            f:FireServer("MakePetShiny", id)
                        end
                    end
                end
            end
            for i,d in pairs(e[hn]) do
    		    local id = d[1]
                local name = d[2]
                local rarity = HGetRarity(name)
                if hats.flags[rarity] == true then 
    		    	HDelete(id)
    		    elseif hats.flags.easyleg then
    		    	for i , v in pairs(HEasyLeg) do 
    		    		if v == name then
    		    			HDelete(id)
    		    		end
    		    	end
    		    end
    		end
    	end
    end)
end

if game.PlaceVersion > LatestSupportedVersion then

    function RandomVariable(length)
        local res = ""
        for i = 1, length do
            res = res .. string.char(math.random(97, 122))
        end
        return res
    end

    local ScreenGui = Instance.new("ScreenGui")
    local Frame = Instance.new("Frame")
    local TextLabel = Instance.new("TextLabel")
    local TextLabel_2 = Instance.new("TextLabel")
    local TextLabel_3 = Instance.new("TextLabel")
    local Yes = Instance.new("TextButton")
    local No = Instance.new("TextButton")
scr()
    
else
    scr()
end
